{
  "name": "ExtraRedis",
  "tagline": "redis api that provides lot of features",
  "body": "# extraRedis\r\n###redis api that provides lot of features :\r\n- [x] **pub/sub -** send and get messages from the job during proccessing without needing to if your message\r\n- [x] **request/reply -** the abiliy to publish message that the response will return directly to you with simple api based on promises .\r\n- [x] **producer/consumer -** now you can create simple job that will be sent to only one consumer at a time\r\n- [x] **queryable -** the ability to query your returned via verity of criteria based on rx observable\r\n- [ ] **merging multiple subscribers into one data stream**- (in the next few days) an ability to limit the number of workers that will handle the job\r\n- [ ] **producer consumer improvements**- (in the next few days) an ability to limit the number of workers that will handle the job\r\nMore details below under the user instructions section\r\n\r\n### Usage instructions:\r\n\r\n#### creating new object\r\n\r\n```javascript\r\n\r\nvar ERedis = new extraRedis({port:6379,host:\"127.0.0.1\"});\r\n```\r\n\r\n#### creating simple pub sub with multiple subscribers\r\n\r\n```javascript\r\n\r\nERedis.on('foo',(message)=>{\r\n    console.log('foo -> '+message);\r\n},guid=>{console.log('guidfoo-> '+guid)})\r\n\r\nERedis.on('foo',(message)=>{\r\n    console.log('foo2 -> '+message);\r\n},guid=>{console.log('guidfoo2-> '+guid)})\r\n\r\nERedis.emit('foo','bar');\r\n\r\n// foo -> bar\r\n// foo2 -> bar\r\n\r\n```\r\n\r\n\r\n####  creating request reply so only the sending emtier will get directly the  message for his answer\r\n\r\n```javascript\r\nERedis.requestReply.on('reqReplyFoo',(message,func)=>{\r\n    console.log('reqReplyFoo-> '+message);\r\n    func('reqReplyOnBar');\r\n})\r\n\r\nERedis.requestReply.emit('reqReplyFoo','reqReplyBar').then((message)=>{\r\n    console.log('reqReplyOnFoo-> '+message);\r\n\r\n}).catch((e)=>{ console.log('ERROR!!!! '+e)});\r\n\r\n// reqReplyFoo-> reqReplyBar\r\n// reqReplyOnFoo-> reqReplyOnBar\r\n\r\n```\r\n\r\n#### creating producer consumers so only one consumer get a job at a time\r\n\r\n```javascript\r\n\r\nERedis.producerConsumer.createJob('prodConsTest');\r\n\r\nERedis.producerConsumer.consume('prodConsTest',(message)=>{\r\n    console.log(`message consumed -> ${message}`);\r\n});\r\nERedis.producerConsumer.consume('prodConsTest',(message)=>{\r\n    console.log(`message consumed -> ${message}`);\r\n});\r\n\r\n\r\nsetTimeout(()=>{\r\n    ERedis.producerConsumer.produce('produce job 1');\r\n    ERedis.producerConsumer.produce('produce job 2');\r\n},5000)\r\n\r\n// message consumed -> produce job 1\r\n// message consumed -> produce job 2\r\n\r\n```\r\n\r\n#### creating queryable instance\r\n\r\n```javascript\r\n\r\nERedis.queryable.createQueryableInstance('foo')\r\n                       .subscribe(message =>{\r\n                           console.log(`queryable Instance -> ${message}`)\r\n                       })\r\n\r\n// queryable Instance -> bar\r\n\r\n```\r\n\r\n\r\n#### creating queryable instance with filter\r\n\r\n```javascript\r\n\r\nERedis.queryable.createQueryableInstance('foo')\r\n    .filter((message)=>{\r\n        return message.valueOf() =='bar'\r\n    })\r\n    .subscribe(message =>{\r\n        console.log(`queryable Instance with filter -> ${message}`)\r\n    })\r\n// queryable Instance with filter -> bar\r\n\r\n```\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}